{"ast":null,"code":"import BigNumber from 'bignumber.js';\nexport const getBalanceNumber = function (balance) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  console.log(balance);\n  const displayBalance = balance.dividedBy(new BigNumber(10).pow(decimals));\n  return displayBalance.toNumber();\n};\nexport const getDisplayBalance = function (balance) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  const displayBalance = balance.dividedBy(new BigNumber(10).pow(decimals));\n  return displayBalance.toPrecision(5);\n};\nexport const getFullDisplayBalance = function (balance) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed();\n};","map":{"version":3,"sources":["/home/fibo/Documents/workspace/front-lp-stack/src/utils/formatBalance.ts"],"names":["BigNumber","getBalanceNumber","balance","decimals","console","log","displayBalance","dividedBy","pow","toNumber","getDisplayBalance","toPrecision","getFullDisplayBalance","toFixed"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,UAACC,OAAD,EAAuC;AAAA,MAAlBC,QAAkB,uEAAP,EAAO;AACrEC,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,QAAMI,cAAc,GAAGJ,OAAO,CAACK,SAAR,CAAkB,IAAIP,SAAJ,CAAc,EAAd,EAAkBQ,GAAlB,CAAsBL,QAAtB,CAAlB,CAAvB;AACA,SAAOG,cAAc,CAACG,QAAf,EAAP;AACD,CAJM;AAMP,OAAO,MAAMC,iBAAiB,GAAG,UAACR,OAAD,EAAuC;AAAA,MAAlBC,QAAkB,uEAAP,EAAO;AACtE,QAAMG,cAAc,GAAGJ,OAAO,CAACK,SAAR,CAAkB,IAAIP,SAAJ,CAAc,EAAd,EAAkBQ,GAAlB,CAAsBL,QAAtB,CAAlB,CAAvB;AACA,SAAOG,cAAc,CAACK,WAAf,CAA2B,CAA3B,CAAP;AACD,CAHM;AAKP,OAAO,MAAMC,qBAAqB,GAAG,UAACV,OAAD,EAAuC;AAAA,MAAlBC,QAAkB,uEAAP,EAAO;AAC1E,SAAOD,OAAO,CAACK,SAAR,CAAkB,IAAIP,SAAJ,CAAc,EAAd,EAAkBQ,GAAlB,CAAsBL,QAAtB,CAAlB,EAAmDU,OAAnD,EAAP;AACD,CAFM","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  console.log(balance)\n  const displayBalance = balance.dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = balance.dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toPrecision(5)\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n"]},"metadata":{},"sourceType":"module"}