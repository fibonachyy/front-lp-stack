{"ast":null,"code":"import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport { Contracts } from './lib/contracts.js';\nimport { EVM } from './lib/evm.js';\nimport { contractAddresses } from './lib/constants';\nexport class Farm {\n  constructor(provider, networkId, testing, options) {\n    var realProvider;\n\n    if (typeof provider === 'string') {\n      if (provider.includes('wss')) {\n        realProvider = new Web3.providers.WebsocketProvider(provider, options.ethereumNodeTimeout || 10000);\n      } else {\n        realProvider = new Web3.providers.HttpProvider(provider, options.ethereumNodeTimeout || 10000);\n      }\n    } else {\n      realProvider = provider;\n    }\n\n    this.web3 = new Web3(realProvider);\n\n    if (testing) {\n      this.testing = new EVM(realProvider);\n      this.snapshot = this.testing.snapshot();\n    }\n\n    if (options.defaultAccount) {\n      this.web3.eth.defaultAccount = options.defaultAccount;\n    }\n\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options);\n    this.erc20Address = contractAddresses.erc20[networkId];\n    this.erc20v2Address = contractAddresses.erc20[networkId];\n    this.farmAddress = contractAddresses.farm[networkId];\n    this.wethAddress = contractAddresses.weth[networkId];\n  }\n\n  setProvider(provider, networkId) {\n    this.web3.setProvider(provider);\n    this.contracts.setProvider(provider, networkId);\n    this.operation.setNetworkId(networkId);\n  }\n\n  toBigN(a) {\n    return BigNumber(a);\n  }\n\n}","map":{"version":3,"sources":["/home/fibo/Documents/workspace/front-lp-stack/src/farm/Farm.js"],"names":["Web3","BigNumber","Contracts","EVM","contractAddresses","Farm","constructor","provider","networkId","testing","options","realProvider","includes","providers","WebsocketProvider","ethereumNodeTimeout","HttpProvider","web3","snapshot","defaultAccount","eth","contracts","erc20Address","erc20","erc20v2Address","farmAddress","farm","wethAddress","weth","setProvider","operation","setNetworkId","toBigN","a"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,SAASC,iBAAT,QAAkC,iBAAlC;AAEA,OAAO,MAAMC,IAAN,CAAW;AAChBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AACjD,QAAIC,YAAJ;;AAEA,QAAI,OAAOJ,QAAP,KAAoB,QAAxB,EAAkC;AAChC,UAAIA,QAAQ,CAACK,QAAT,CAAkB,KAAlB,CAAJ,EAA8B;AAC5BD,QAAAA,YAAY,GAAG,IAAIX,IAAI,CAACa,SAAL,CAAeC,iBAAnB,CACbP,QADa,EAEbG,OAAO,CAACK,mBAAR,IAA+B,KAFlB,CAAf;AAID,OALD,MAKO;AACLJ,QAAAA,YAAY,GAAG,IAAIX,IAAI,CAACa,SAAL,CAAeG,YAAnB,CACbT,QADa,EAEbG,OAAO,CAACK,mBAAR,IAA+B,KAFlB,CAAf;AAID;AACF,KAZD,MAYO;AACLJ,MAAAA,YAAY,GAAGJ,QAAf;AACD;;AAED,SAAKU,IAAL,GAAY,IAAIjB,IAAJ,CAASW,YAAT,CAAZ;;AAEA,QAAIF,OAAJ,EAAa;AACX,WAAKA,OAAL,GAAe,IAAIN,GAAJ,CAAQQ,YAAR,CAAf;AACA,WAAKO,QAAL,GAAgB,KAAKT,OAAL,CAAaS,QAAb,EAAhB;AACD;;AAED,QAAIR,OAAO,CAACS,cAAZ,EAA4B;AAC1B,WAAKF,IAAL,CAAUG,GAAV,CAAcD,cAAd,GAA+BT,OAAO,CAACS,cAAvC;AACD;;AACD,SAAKE,SAAL,GAAiB,IAAInB,SAAJ,CAAcS,YAAd,EAA4BH,SAA5B,EAAuC,KAAKS,IAA5C,EAAkDP,OAAlD,CAAjB;AACA,SAAKY,YAAL,GAAoBlB,iBAAiB,CAACmB,KAAlB,CAAwBf,SAAxB,CAApB;AACA,SAAKgB,cAAL,GAAsBpB,iBAAiB,CAACmB,KAAlB,CAAwBf,SAAxB,CAAtB;AACA,SAAKiB,WAAL,GAAmBrB,iBAAiB,CAACsB,IAAlB,CAAuBlB,SAAvB,CAAnB;AACA,SAAKmB,WAAL,GAAmBvB,iBAAiB,CAACwB,IAAlB,CAAuBpB,SAAvB,CAAnB;AACD;;AAEDqB,EAAAA,WAAW,CAACtB,QAAD,EAAWC,SAAX,EAAsB;AAC/B,SAAKS,IAAL,CAAUY,WAAV,CAAsBtB,QAAtB;AACA,SAAKc,SAAL,CAAeQ,WAAf,CAA2BtB,QAA3B,EAAqCC,SAArC;AACA,SAAKsB,SAAL,CAAeC,YAAf,CAA4BvB,SAA5B;AACD;;AAEDwB,EAAAA,MAAM,CAACC,CAAD,EAAI;AACR,WAAOhC,SAAS,CAACgC,CAAD,CAAhB;AACD;;AA7Ce","sourcesContent":["import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contracts } from './lib/contracts.js'\nimport { EVM } from './lib/evm.js'\n\nimport { contractAddresses } from './lib/constants'\n\nexport class Farm {\n  constructor(provider, networkId, testing, options) {\n    var realProvider\n\n    if (typeof provider === 'string') {\n      if (provider.includes('wss')) {\n        realProvider = new Web3.providers.WebsocketProvider(\n          provider,\n          options.ethereumNodeTimeout || 10000,\n        )\n      } else {\n        realProvider = new Web3.providers.HttpProvider(\n          provider,\n          options.ethereumNodeTimeout || 10000,\n        )\n      }\n    } else {\n      realProvider = provider\n    }\n\n    this.web3 = new Web3(realProvider)\n\n    if (testing) {\n      this.testing = new EVM(realProvider)\n      this.snapshot = this.testing.snapshot()\n    }\n\n    if (options.defaultAccount) {\n      this.web3.eth.defaultAccount = options.defaultAccount\n    }\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options)\n    this.erc20Address = contractAddresses.erc20[networkId]\n    this.erc20v2Address = contractAddresses.erc20[networkId]\n    this.farmAddress = contractAddresses.farm[networkId]\n    this.wethAddress = contractAddresses.weth[networkId]\n  }\n\n  setProvider(provider, networkId) {\n    this.web3.setProvider(provider)\n    this.contracts.setProvider(provider, networkId)\n    this.operation.setNetworkId(networkId)\n  }\n\n  toBigN(a) {\n    return BigNumber(a)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}