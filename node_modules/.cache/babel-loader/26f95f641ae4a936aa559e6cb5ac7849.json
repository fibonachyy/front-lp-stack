{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { getFarmContract, getWethContract, getFarms, getTotalLPWethValue } from '../farm/utils';\nimport useYam from './useYam';\nimport useBlock from './useBlock';\n\nconst useAllStakedValue = () => {\n  const [balances, setBalance] = useState([]);\n  const {\n    account\n  } = useWallet();\n  const yam = useYam();\n  const farms = getFarms(yam);\n  const farmContract = getFarmContract(yam);\n  const wethContact = getWethContract(yam);\n  const block = useBlock();\n  const fetchAllStakedValue = useCallback(async () => {\n    const balances = await Promise.all(farms.map(_ref => {\n      let {\n        pid,\n        lpContract,\n        tokenContract\n      } = _ref;\n      return getTotalLPWethValue(farmContract, wethContact, lpContract, tokenContract, pid);\n    }));\n    setBalance(balances);\n  }, [account, farmContract, yam]);\n  useEffect(() => {\n    if (account && farmContract && yam) {\n      fetchAllStakedValue();\n    }\n  }, [account, block, farmContract, setBalance, yam]);\n  return balances;\n};\n\nexport default useAllStakedValue;","map":{"version":3,"sources":["/home/fibo/Documents/workspace/front-lp-stack/src/hooks/useAllStakedValue.ts"],"names":["useCallback","useEffect","useState","useWallet","getFarmContract","getWethContract","getFarms","getTotalLPWethValue","useYam","useBlock","useAllStakedValue","balances","setBalance","account","yam","farms","farmContract","wethContact","block","fetchAllStakedValue","Promise","all","map","pid","lpContract","tokenContract"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAIA,SAASC,SAAT,QAA0B,YAA1B;AAGA,SACEC,eADF,EAEEC,eAFF,EAGEC,QAHF,EAIEC,mBAJF,QAKO,eALP;AAMA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAUA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBV,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAuDV,SAAS,EAAtE;AACA,QAAMW,GAAG,GAAGN,MAAM,EAAlB;AACA,QAAMO,KAAK,GAAGT,QAAQ,CAACQ,GAAD,CAAtB;AACA,QAAME,YAAY,GAAGZ,eAAe,CAACU,GAAD,CAApC;AACA,QAAMG,WAAW,GAAGZ,eAAe,CAACS,GAAD,CAAnC;AACA,QAAMI,KAAK,GAAGT,QAAQ,EAAtB;AAEA,QAAMU,mBAAmB,GAAGnB,WAAW,CAAC,YAAY;AAClD,UAAMW,QAA4B,GAAG,MAAMS,OAAO,CAACC,GAAR,CACzCN,KAAK,CAACO,GAAN,CACE;AAAA,UAAC;AACCC,QAAAA,GADD;AAECC,QAAAA,UAFD;AAGCC,QAAAA;AAHD,OAAD;AAAA,aASElB,mBAAmB,CACjBS,YADiB,EAEjBC,WAFiB,EAGjBO,UAHiB,EAIjBC,aAJiB,EAKjBF,GALiB,CATrB;AAAA,KADF,CADyC,CAA3C;AAqBAX,IAAAA,UAAU,CAACD,QAAD,CAAV;AACD,GAvBsC,EAuBpC,CAACE,OAAD,EAAUG,YAAV,EAAwBF,GAAxB,CAvBoC,CAAvC;AAyBAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,OAAO,IAAIG,YAAX,IAA2BF,GAA/B,EAAoC;AAClCK,MAAAA,mBAAmB;AACpB;AACF,GAJQ,EAIN,CAACN,OAAD,EAAUK,KAAV,EAAiBF,YAAjB,EAA+BJ,UAA/B,EAA2CE,GAA3C,CAJM,CAAT;AAMA,SAAOH,QAAP;AACD,CAzCD;;AA2CA,eAAeD,iBAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { provider } from 'web3-core'\n\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\nimport { Contract } from 'web3-eth-contract'\n\nimport {\n  getFarmContract,\n  getWethContract,\n  getFarms,\n  getTotalLPWethValue,\n} from '../farm/utils'\nimport useYam from './useYam'\nimport useBlock from './useBlock'\n\nexport interface StakedValue {\n  tokenAmount: BigNumber\n  wethAmount: BigNumber\n  totalWethValue: BigNumber\n  tokenPriceInWeth: BigNumber\n  poolWeight: BigNumber\n}\n\nconst useAllStakedValue = () => {\n  const [balances, setBalance] = useState([] as Array<StakedValue>)\n  const { account }: { account: string; ethereum: provider } = useWallet()\n  const yam = useYam()\n  const farms = getFarms(yam)\n  const farmContract = getFarmContract(yam)\n  const wethContact = getWethContract(yam)\n  const block = useBlock()\n\n  const fetchAllStakedValue = useCallback(async () => {\n    const balances: Array<StakedValue> = await Promise.all(\n      farms.map(\n        ({\n          pid,\n          lpContract,\n          tokenContract,\n        }: {\n          pid: number\n          lpContract: Contract\n          tokenContract: Contract\n        }) =>\n          getTotalLPWethValue(\n            farmContract,\n            wethContact,\n            lpContract,\n            tokenContract,\n            pid,\n          ),\n      ),\n    )\n\n    setBalance(balances)\n  }, [account, farmContract, yam])\n\n  useEffect(() => {\n    if (account && farmContract && yam) {\n      fetchAllStakedValue()\n    }\n  }, [account, block, farmContract, setBalance, yam])\n\n  return balances\n}\n\nexport default useAllStakedValue\n"]},"metadata":{},"sourceType":"module"}